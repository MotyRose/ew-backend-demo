# PostgreSQL Docker Environment Variables Template
# Use this configuration for running PostgreSQL in Docker containers

##### Server #####
NODE_ENV=development
PORT=3000
LOG_LEVEL=debug

##### Database Configuration #####
# Set database type to postgres
DB_TYPE=postgres

##### PostgreSQL Docker Database #####
# For Docker PostgreSQL container (matches docker-compose.postgres.yml)
DB_HOST=localhost
DB_PORT=5432
DB_USERNAME=fireblocks_user
DB_PASSWORD=fireblocks_password
DB_NAME=ew_demo

# Alternative: Use DATABASE_URL format
DATABASE_URL=postgresql://fireblocks_user:fireblocks_password@localhost:5432/ew_demo

# PostgreSQL-specific settings
DB_SSL=false

##### Docker Compose PostgreSQL Configuration #####
# These match the docker-compose.postgres.yml service configuration
POSTGRES_DB=ew_demo
POSTGRES_USER=fireblocks_user
POSTGRES_PASSWORD=fireblocks_password
POSTGRES_ROOT_PASSWORD=your_secure_root_password_here

##### pgAdmin Configuration #####
# Web interface credentials (http://localhost:8080)
PGADMIN_EMAIL=admin@fireblocks.com
PGADMIN_PASSWORD=admin_password

##### Optional: Redis Configuration #####
# Redis is included in docker-compose.postgres.yml for caching
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
# Example usage in application: redis://localhost:6379

##### Authentication - REPLACE WITH YOUR VALUES #####
JWKS_URI=https://your-auth-provider.com/.well-known/jwks.json
ISSUER=https://your-auth-provider.com/
AUDIENCE=your-audience-identifier

##### Fireblocks Webhook Public Key - CHOOSE SANDBOX OR PRODUCTION #####
# Fireblocks Sandbox
FIREBLOCKS_WEBHOOK_PUBLIC_KEY="-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAw+fZuC+0vDYTf8fYnCN6\n71iHg98lPHBmafmqZqb+TUexn9sH6qNIBZ5SgYFxFK6dYXIuJ5uoORzihREvZVZP\n8DphdeKOMUrMr6b+Cchb2qS8qz8WS7xtyLU9GnBn6M5mWfjkjQr1jbilH15Zvcpz\nECC8aPUAy2EbHpnr10if2IHkIAWLYD+0khpCjpWtsfuX+LxqzlqQVW9xc6z7tshK\neCSEa6Oh8+ia7Zlu0b+2xmy2Arb6xGl+s+Rnof4lsq9tZS6f03huc+XVTmd6H2We\nWxFMfGyDCX2akEg2aAvx7231/6S0vBFGiX0C+3GbXlieHDplLGoODHUt5hxbPJnK\nIwIDAQAB\n-----END PUBLIC KEY-----"

##### Firebase Service Account - PASTE YOUR JSON CONTENT #####
# Copy the entire content of your Firebase service account JSON file and paste it as the value
# Get JSON from: Firebase Console > Project Settings > Service Accounts > Generate new private key
FIREBASE_SERVICE_ACCOUNT_JSON={"type":"service_account","project_id":"your-project-id","private_key_id":"abc123","private_key":"-----BEGIN PRIVATE KEY-----\nYOUR_PRIVATE_KEY_HERE\n-----END PRIVATE KEY-----\n","client_email":"your-service-account@your-project.iam.gserviceaccount.com","client_id":"123456789","auth_uri":"https://accounts.google.com/o/oauth2/auth","token_uri":"https://oauth2.googleapis.com/token","auth_provider_x509_cert_url":"https://www.googleapis.com/oauth2/v1/certs","client_x509_cert_url":"https://www.googleapis.com/robot/v1/metadata/x509/your-service-account%40your-project.iam.gserviceaccount.com"}

##### Push Notifications - GENERATE YOUR VAPID KEYS #####
# Generate VAPID keys using: npx web-push generate-vapid-keys
VAPID_SUBJECT=mailto:your-email@fireblocks.com
VAPID_PUBLIC_KEY=YOUR_VAPID_PUBLIC_KEY_HERE
VAPID_PRIVATE_KEY=YOUR_VAPID_PRIVATE_KEY_HERE

##### CORS Origins - SET YOUR FRONTEND DOMAINS #####
ORIGIN_WEB_SDK=http://localhost:3000,http://localhost:5173,https://your-frontend-domain.com

##### PostgreSQL Docker Setup Instructions #####
# 1. Copy this file to .env: cp .env.docker.postgres .env
# 2. Start PostgreSQL with Docker: make start-postgres-dev
# 3. Access pgAdmin: http://localhost:8080
#    - Email: admin@fireblocks.com
#    - Password: admin_password
# 4. Connect to PostgreSQL in pgAdmin:
#    - Host: postgres (or localhost from outside Docker)
#    - Port: 5432
#    - Database: ew_demo
#    - Username: fireblocks_user
#    - Password: fireblocks_password
# 5. Run migrations: yarn migration:run
# 6. Start the application: yarn dev

##### Performance Tuning Notes #####
# The docker-compose.postgres.yml includes optimized PostgreSQL settings:
# - max_connections=200 (increase if needed)
# - shared_buffers=256MB (adjust based on available RAM)
# - effective_cache_size=1GB (should be ~75% of available RAM)
# - work_mem=4MB (per connection, monitor usage)
#
# For production, consider:
# - Increasing shared_buffers to 25% of RAM
# - Adjusting effective_cache_size to 75% of RAM
# - Monitoring connection usage and adjusting max_connections
